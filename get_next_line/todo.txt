# include <stdlib.h>
# include <unistd.h>

# ifndef BUFFER_SIZE
#  define BUFFER_SIZE 6
# endif

# define ERROR (-1)
# define NOT_EOFILE 1
# define EOFILE 0
#include <stdio.h>


char    *ft_strcpy(char *dst, const char *src)
{
    int    i;

    i = 0;
    while (src[i])
    {
        dst[i] = src[i];
        i++;
    }
    dst[i] = 0;
    return (dst);
}


int    ft_strlen(char *str)
{
    int    i;

    i = 0;
    while (str[i])
        i++;
    return (i);
}


char    *ft_strappend(char *s1, char *s2, int n)
{
    char *aux;

    aux = (char*)malloc((ft_strlen(s1) + BUFFER_SIZE + 1) * sizeof(char));
    if (!aux)
        return (NULL);
    if (s1)
        ft_strcpy(aux, s1);
    ft_strcpy(aux + ft_strlen(s1), s2);
    return (aux);
}

char    *ft_strchr_pos(const char *s, int c, int *pos)
{
    *pos = 0;
    while (*s)
    {
        if (*s == c)
            return ((char *)s);
        s++;
        (*pos)++;
    }
    if (c == 0)
    {
        *pos = 0;
        return ((char *)s);
    }
    return (NULL);
}


int    get_next_line_rec(int fd, char *line)
{
    static char    buf[BUFFER_SIZE + 1] = {0};
    int        ret;
    int        pos;
    char        *aux;
    char *text = "jeje";

    if (buf[0] == 0)
    {
        //ret = read(fd, buf, BUFFER_SIZE);
        ft_strcpy(buf, text);
        ret = 3;
        if (ret < 0)
            return (ERROR);
        else if (ret == 0)
            return (EOFILE);
        if (ret != BUFFER_SIZE)
            ret = EOFILE;
    }
    if ((aux = ft_strchr_pos(buf, '\n', &pos)) != NULL)
    {
        line = ft_strappend(line, buf, pos); //maybe + 1
        ft_strcpy(buf, aux);
        // el 0 jeje
        return (NOT_EOFILE);
    }
    else
    {
        aux = ft_strappend(line, buf, BUFFER_SIZE); //BUFFERSIZE maybe no
        buf[0] = 0;
        ft_strcpy(line, aux);
        free(aux);
        if (ret == NOT_EOFILE)
            return (get_next_line_rec(fd, line));
        return (ret);
    }
}


int    get_next_line(int fd, char **line)
{
    int    ret;

    *line = (char*)malloc((BUFFER_SIZE + 1) * sizeof(char));
    (*line)[0] = 0;
    if (!(*line))
        return (ERROR);
    return (get_next_line_rec(fd, *line));
}

int main()
{
    int ret;
    char *line = NULL;
    int fd = 0;

    ret = get_next_line(fd, &line);
    printf("%d\n", ret);
}
